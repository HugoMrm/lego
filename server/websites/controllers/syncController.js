const DealabsService = require('./dealabsController');
const VintedService = require('./vintedController');
const DatabaseService = require('../services/databaseService');
const { delay } = require('../utils/helpers');

async function fullSync() {
  try {
    // 1. Synchronisation Dealabs
    await DatabaseService.refreshCollection(
      'dealabs', 
      'deals', 
      () => DealabsService.scrapeDealabs('lego')
    );

    // 2. R√©cup√©ration des IDs LEGO uniques
    const legoIds = await DatabaseService.getDistinctValues(
      'dealabs', 
      'deals', 
      'id_lego'
    );

    console.log(`üîç ${legoIds.length} IDs Lego trouv√©s pour synchronisation Vinted`);

    // 3. Synchronisation Vinted par lot avec sauvegarde des r√©sultats
    const BATCH_SIZE = 5;
    const allVintedDeals = [];
    
    for (let i = 0; i < legoIds.length; i += BATCH_SIZE) {
      const batch = legoIds.slice(i, i + BATCH_SIZE);
      
      // R√©cup√©ration des deals pour le lot courant
      const batchResults = await Promise.all(
        batch.map(legoId => 
          VintedService.scrapeVinted(`Lego ${legoId}`)
            .then(deals => {
              console.log(`‚úÖ ${deals.length} items trouv√©s pour Lego ${legoId}`);
              return deals;
            })
            .catch(err => {
              console.error(`‚ùå Erreur pour Lego ${legoId}:`, err.message);
              return []; // Retourne un tableau vide en cas d'erreur
            })
        )
      );

      // Ajout des r√©sultats au tableau global
      allVintedDeals.push(...batchResults.flat());
      
      // D√©lai anti-rate limiting entre les lots
      if (i + BATCH_SIZE < legoIds.length) {
        console.log(`‚è≥ Pause de 5s avant le prochain lot...`);
        await delay(5000);
      }
    }

    // 4. Sauvegarde finale dans MongoDB
    if (allVintedDeals.length > 0) {
      await DatabaseService.refreshCollection(
        'vinted',
        'deals',
        () => Promise.resolve(allVintedDeals)
      );
      console.log(`üíæ ${allVintedDeals.length} deals Vinted sauvegard√©s`);
    } else {
      console.log('‚ÑπÔ∏è Aucun deal Vinted √† sauvegarder');
    }

  } catch (error) {
    console.error('‚ùå Erreur fatale lors de la synchronisation:', error);
    throw error;
  }
}

module.exports = { fullSync };